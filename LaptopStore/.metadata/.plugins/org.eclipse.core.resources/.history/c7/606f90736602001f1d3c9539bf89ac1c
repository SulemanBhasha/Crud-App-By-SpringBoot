package com.boostmytool.bestlaptopstore.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.*;

import com.boostmytool.bestlaptopstore.models.Product;
import com.boostmytool.bestlaptopstore.models.ProductDetails;
import com.boostmytool.bestlaptopstore.services.ProductsRepositary;

import jakarta.annotation.PostConstruct;
import jakarta.validation.Valid;

@Controller
@RequestMapping("/Products")
public class ProductController {

	@Autowired
	private ProductsRepositary repo;
		
	@GetMapping({"","/"})
	public String showProductList(Model model) {
		List<Product> products = repo.findAll(Sort.by(Sort.Direction.DESC,"id"));
		model.addAttribute("products", products);
		return "Products/index";
		
	}
	
	@GetMapping("/create")
	public String showCreatePage(Model model) {
	ProductDetails product= new ProductDetails();
	model.addAttribute("product", product);
		
	return "Products/CreateProduct";
	}
	
	@PostMapping("/created")
	public String createProduct(
			@Valid @ModelAttribute("product") ProductDetails product,
			BindingResult result) {
		if(product.getImageFile().isEmpty()) {
			result.addError(new FieldError("product","imageFile","The image File is required"));
		}
		if(result.hasErrors()) {
			return "Products/CreateProduct";
		}
//		save the image 
		MultipartFile imageFile = product.getImageFile();
		Date createdAt= new Date();
		String storageFileName = createdAt.getTime()+"_"+imageFile.getOriginalFilename();
		try {
		
		String uploadDir= "Public/LaptopImages/";
		Path uploadPath = Paths.get(uploadDir);
		if(!Files.exists(uploadPath)) {
			Files.createDirectories(uploadPath);
		}
		try (InputStream inputStream = imageFile.getInputStream()){
				Files.copy(inputStream, Paths.get(uploadDir+storageFileName),StandardCopyOption.REPLACE_EXISTING);;
		}
		}	catch (Exception ex) {
			// TODO: handle exception
			System.out.println("exception---->>"+ ex.getMessage());
		}
		
		Product product1 = new Product();
		product1.setName(product.getName());
		product1.setBrand(product.getBrand());
		product1.setCategory(product.getCategory());
		product1.setDescription(product.getDescription());
		product1.setCreatedAt(createdAt);
		product1.setPrice(product.getPrice());
		System.out.println(storageFileName);
		product1.setImageFileName(storageFileName);
		repo.save(product1);
		
		
		
		return "redirect:/Products";
		
	}
	@GetMapping("/edit")
	public String showEditPage(Model model,@RequestParam int id) {
		try {
			 
		Product product	 = repo.findById(id).get();
		model.addAttribute("product", product);
		
		ProductDetails pd= new ProductDetails();
		pd.setName(product.getName());
		pd.setBrand(product.getBrand());
		pd.setCategory(product.getCategory());
		pd.setDescription(product.getDescription());
		pd.setPrice(product.getPrice());
		System.out.println(product.getImageFileName());
		
		model.addAttribute("productDto", pd);
			
		}catch (Exception e) {
			// TODO: handle exception
			System.out.println("exception--->"+e.getMessage());
			return "redirect:/Products";
		}
		return "Products/EditProduct";
	}
	
	@PostMapping("/edit")
	public String updateproduct(Model model,
			@RequestParam int id, @Valid @ModelAttribute("productDto") ProductDetails product,BindingResult result
	) {
		try {
			
			System.out.println(id);
			Product pd = repo.findById(id).get();
			if(product.getImageFile().isEmpty()) {
				result.addError(new FieldError("product","imageFile","The image File is required"));
			}
			model.addAttribute("product", pd);
			model.addAttribute("productDto", product);
			
			if(result.hasErrors()) {
				
			System.out.println("errors found------------------");
				return "Products/EditProduct";
			}
			
			if(!product.getImageFile().isEmpty()) {
				String uploadDir= "Public/LaptopImages";
				Path oldImagePath = Paths.get(uploadDir+product.getImageFile());
				
				try {
					Files.delete(oldImagePath);
				}catch(IOException ex) {
					System.out.println("exception--> "+ex.getMessage());
				}
//				save new  Iamge
				MultipartFile image = product.getImageFile();
				Date createdAt= new Date();
				String storageFileName = createdAt.getTime()+"_"+image.getOriginalFilename();
				try (InputStream inputStream = image.getInputStream()){
					Files.copy(inputStream, Paths.get(uploadDir+storageFileName),StandardCopyOption.REPLACE_EXISTING);;
			}
				pd.setImageFileName(storageFileName);
			}
			pd.setName(product.getName());
			pd.setBrand(product.getBrand());
			pd.setCategory(product.getCategory());
			pd.setPrice(product.getPrice());
			pd.setDescription(product.getDescription());
			repo.save(pd);
		}catch (Exception e) {
			System.out.println("exception-->"+e.getMessage());
			// TODO: handle exception
		}
		
		return "redirect:/Products";
	}
}

